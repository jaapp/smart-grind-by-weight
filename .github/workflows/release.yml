name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write
  actions: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        pip install platformio
        pio upgrade
    
    - name: Build firmware
      run: |
        # Use platformio directly like local development to ensure identical build
        pio run -e waveshare-esp32s3-touch-amoled-164
        
    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        VERSION=${{ github.ref_name }}
        # Copy firmware binary from the main environment with versioned name
        cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin release-artifacts/smart-grind-by-weight-${VERSION}.bin
        
        # Copy versioned firmware to tools/web-flasher for CORS-free hosting
        mkdir -p tools/web-flasher/firmware
        
        # Copy firmware with version in filename
        cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin
        
        # Generate web-specific OTA patch files with version
        pip install detools
        if [ -f "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin" ]; then
          echo "Generating web OTA patch for smart-grind-by-weight-${VERSION}.bin"
          # Create empty file for delta base
          touch empty.bin
          # Generate compressed patch against empty file (web flasher only)
          detools create_patch -c heatshrink empty.bin "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin" "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-web-ota.bin"
          echo "Web OTA patch created: smart-grind-by-weight-${VERSION}-web-ota.bin ($(du -h "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-web-ota.bin" | cut -f1))"
        fi
        
        # Generate individual manifest files for each firmware version
        echo "Generating manifest files..."
        cd tools/web-flasher/firmware
        for firmware_file in smart-grind-by-weight-v*.bin; do
          if [[ -f "$firmware_file" && "$firmware_file" != *"-web-ota.bin" ]]; then
            # Extract version from filename
            firmware_version=$(echo "$firmware_file" | sed 's/smart-grind-by-weight-v\(.*\)\.bin/\1/')
            manifest_file="${firmware_file%.bin}.manifest.json"
            
            # Create manifest file
            cat > "$manifest_file" << 'MANIFEST_EOF'
{
  "name": "Smart Grind By Weight",
  "version": "FIRMWARE_VERSION_PLACEHOLDER",
  "home_assistant_domain": "grinder",
  "new_install_skip_erase": false,
  "builds": [
    {
      "chipFamily": "ESP32-S3",
      "parts": [
        {
          "path": "FIRMWARE_FILE_PLACEHOLDER",
          "offset": 0
        }
      ]
    }
  ]
}
MANIFEST_EOF
            # Replace placeholders
            sed -i "s/FIRMWARE_VERSION_PLACEHOLDER/$firmware_version/g" "$manifest_file"
            sed -i "s/FIRMWARE_FILE_PLACEHOLDER/$firmware_file/g" "$manifest_file"
            echo "Generated manifest: $manifest_file"
          fi
        done
        cd ../../..
        # Create a firmware package
        cd release-artifacts
        tar -czf smart-grind-by-weight-${{ github.ref_name }}.tar.gz *.bin
        cd ..
        
    - name: Commit web-flasher firmware files
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Switch to main branch (we're in detached HEAD from tag checkout)
        git checkout main
        git pull origin main
        
        # Copy the versioned firmware files to the main branch
        mkdir -p tools/web-flasher/firmware
        VERSION=${{ github.ref_name }}
        cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin 2>/dev/null || true
        find . -name "*-web-ota.bin" -exec cp {} tools/web-flasher/firmware/ \; 2>/dev/null || true
        
        
        # Add the generated firmware files and manifests for web flasher
        git add tools/web-flasher/firmware/*.bin tools/web-flasher/firmware/*.manifest.json
        
        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "chore: Update web-flasher firmware for release ${{ github.ref_name }}"
          git push origin main
        fi
        
    - name: Prepare release notes
      id: changelog
      run: |
        # Create simple release notes with installation instructions
        cat > release-notes.md << EOF
        ## Installation
        
        1. Download \`smart-grind-by-weight-${{ github.ref_name }}.bin\` below
        2. Use the grinder tool to upload: \`python3 tools/grinder.py upload smart-grind-by-weight-${{ github.ref_name }}.bin\`
        
        ## Build Information
        - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit: ${{ github.sha }}
        - Tag: ${{ github.ref_name }}
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-artifacts/*.tar.gz
          release-artifacts/*.bin
        body: ${{ steps.changelog.outputs.changelog }}
        draft: true
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Trigger web-flasher deployment
      run: |
        # Trigger web flasher deployment workflow manually
        gh workflow run deploy-web-flasher.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}