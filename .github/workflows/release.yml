name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write
  actions: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
    
      - name: Install PlatformIO
        run: |
          pip install platformio
    
      - name: Build firmware
        run: |
          # Use platformio directly like local development to ensure identical build
          # Install dependencies first to ensure exact versions
          pio pkg install
          pio run -e waveshare-esp32s3-touch-amoled-164
        
      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          VERSION=${{ github.ref_name }}
          # Copy firmware binary from the main environment with versioned name
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin release-artifacts/smart-grind-by-weight-${VERSION}.bin
        
          # Copy versioned firmware to tools/web-flasher for CORS-free hosting
          mkdir -p tools/web-flasher/firmware
        
          # Copy firmware with version in filename (application only)
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin
        
          # Copy versioned partition files (partition tables can change between versions)
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/bootloader.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-bootloader.bin
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/partitions.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-partitions.bin
        
          # Create blank 8KB NVS partition file if it doesn't exist (0xe000 to 0x10000)
          if [ ! -f tools/web-flasher/firmware/blank_8KB.bin ]; then
            dd if=/dev/zero of=tools/web-flasher/firmware/blank_8KB.bin bs=8192 count=1
          fi
        
          # Generate web-specific OTA patch files with version
          pip install detools
          if [ -f "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin" ]; then
            echo "Generating web OTA patch for smart-grind-by-weight-${VERSION}.bin"
            # Create empty file for delta base
            touch empty.bin
            # Generate compressed patch against empty file (web flasher only)
            detools create_patch -c heatshrink empty.bin "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin" "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-web-ota.bin"
            echo "Web OTA patch created: smart-grind-by-weight-${VERSION}-web-ota.bin ($(du -h "tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-web-ota.bin" | cut -f1))"
          fi
        
          # Generate individual manifest files for each firmware version
          echo "Generating manifest files..."
          cd tools/web-flasher/firmware
          for firmware_file in smart-grind-by-weight-v*.bin; do
            if [[ -f "$firmware_file" && "$firmware_file" != *"-web-ota.bin" ]]; then
              # Extract version from filename
              firmware_version=$(echo "$firmware_file" | sed 's/smart-grind-by-weight-v\(.*\)\.bin/\1/')
              manifest_file="${firmware_file%.bin}.manifest.json"
              
              # Create manifest file with proper ESP32-S3 partition layout using versioned partition files
              bootloader_file="${firmware_file%.bin}-bootloader.bin"
              partitions_file="${firmware_file%.bin}-partitions.bin"
              
              printf '{\n  "name": "Smart Grind By Weight",\n  "version": "%s",\n  "home_assistant_domain": "grinder",\n  "new_install_skip_erase": true,\n  "builds": [\n    {\n      "chipFamily": "ESP32-S3",\n      "parts": [\n        {\n          "path": "%s",\n          "offset": 0\n        },\n        {\n          "path": "%s",\n          "offset": 32768\n        },\n        {\n          "path": "blank_8KB.bin",\n          "offset": 57344\n        },\n        {\n          "path": "%s",\n          "offset": 3276800\n        }\n      ]\n    }\n  ]\n}\n' "$firmware_version" "$bootloader_file" "$partitions_file" "$firmware_file" > "$manifest_file"
              echo "Generated manifest: $manifest_file"
            fi
          done
          cd ../../..
          # Create a firmware package
          cd release-artifacts
          tar -czf smart-grind-by-weight-${{ github.ref_name }}.tar.gz *.bin
          cd ..
        
      - name: Commit web-flasher firmware files
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
        
          # Switch to main branch (we're in detached HEAD from tag checkout)
          git checkout main
          git pull origin main
        
          # Copy the versioned firmware files to the main branch
          mkdir -p tools/web-flasher/firmware
          VERSION=${{ github.ref_name }}
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}.bin 2>/dev/null || true
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/bootloader.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-bootloader.bin 2>/dev/null || true
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/partitions.bin tools/web-flasher/firmware/smart-grind-by-weight-${VERSION}-partitions.bin 2>/dev/null || true
          find . -name "*-web-ota.bin" -exec cp {} tools/web-flasher/firmware/ \; 2>/dev/null || true
          find . -name "blank_8KB.bin" -exec cp {} tools/web-flasher/firmware/ \; 2>/dev/null || true
        
        
          # Add the generated firmware files and manifests for web flasher
          git add tools/web-flasher/firmware/*.bin tools/web-flasher/firmware/*.manifest.json
        
          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore: Update web-flasher firmware for release ${{ github.ref_name }}"
            git push origin main
          fi
        
      - name: Prepare release notes
        id: changelog
        run: |
          # Create simple release notes with installation instructions
          cat > release-notes.md << EOF
          ## Installation
        
          1. Download \`smart-grind-by-weight-${{ github.ref_name }}.bin\` below
          2. Use the grinder tool to upload: \`python3 tools/grinder.py upload smart-grind-by-weight-${{ github.ref_name }}.bin\`
        
          ## Build Information
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Commit: ${{ github.sha }}
          - Tag: ${{ github.ref_name }}
          EOF
        
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.bin
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Trigger web-flasher deployment
        run: |
          # Trigger web flasher deployment workflow manually
          gh workflow run deploy-web-flasher.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
