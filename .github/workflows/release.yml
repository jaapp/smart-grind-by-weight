name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write
  actions: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
    
      - name: Install PlatformIO
        run: |
          pip install platformio
    
      - name: Build firmware
        run: |
          # Use platformio directly like local development to ensure identical build
          # Install dependencies first to ensure exact versions
          pio pkg install
          pio run -e waveshare-esp32s3-touch-amoled-164
        
      - name: Prepare release artifacts
        run: |
          set -euo pipefail

          mkdir -p release-artifacts
          VERSION=${{ github.ref_name }}
          FIRMWARE_FILE="smart-grind-by-weight-${VERSION}.bin"
          BOOTLOADER_FILE="smart-grind-by-weight-${VERSION}-bootloader.bin"
          PARTITIONS_FILE="smart-grind-by-weight-${VERSION}-partitions.bin"
          OTA_FILE="smart-grind-by-weight-${VERSION}-web-ota.bin"
          MANIFEST_FILE="smart-grind-by-weight-${VERSION}.manifest.json"
          PACKAGE_FILE="smart-grind-by-weight-${VERSION}.tar.gz"
          BLANK_FILE="blank_8KB.bin"

          echo "Preparing firmware artifacts for ${VERSION}"

          # Copy primary firmware outputs into release directory
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin "release-artifacts/${FIRMWARE_FILE}"
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/bootloader.bin "release-artifacts/${BOOTLOADER_FILE}"
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/partitions.bin "release-artifacts/${PARTITIONS_FILE}"

          # Ensure blank NVS image exists
          if [ ! -f "release-artifacts/${BLANK_FILE}" ]; then
            dd if=/dev/zero of="release-artifacts/${BLANK_FILE}" bs=8192 count=1
          fi

          # Generate web-specific OTA patch (delta from empty image)
          python3 -m pip install --no-cache-dir detools
          pushd release-artifacts >/dev/null
          touch empty.bin
          detools create_patch -c heatshrink empty.bin "${FIRMWARE_FILE}" "${OTA_FILE}"
          rm empty.bin
          popd >/dev/null

          # Build ESP Web Tools manifest for USB flashing
          cat <<EOF > "release-artifacts/${MANIFEST_FILE}"
{
  "name": "Smart Grind By Weight",
  "version": "${VERSION#v}",
  "home_assistant_domain": "grinder",
  "new_install_skip_erase": true,
  "builds": [
    {
      "chipFamily": "ESP32-S3",
      "parts": [
        { "path": "${BOOTLOADER_FILE}", "offset": 0 },
        { "path": "${PARTITIONS_FILE}", "offset": 32768 },
        { "path": "${BLANK_FILE}", "offset": 57344 },
        { "path": "${FIRMWARE_FILE}", "offset": 3276800 }
      ]
    }
  ]
}
EOF

          # Build convenience tarball
          pushd release-artifacts >/dev/null
          tar -czf "${PACKAGE_FILE}" "${FIRMWARE_FILE}" "${BOOTLOADER_FILE}" "${PARTITIONS_FILE}" "${OTA_FILE}" "${MANIFEST_FILE}" "${BLANK_FILE}"
          popd >/dev/null

          # Export filenames for later steps
          echo "FIRMWARE_FILE=${FIRMWARE_FILE}" >> $GITHUB_ENV
          echo "BOOTLOADER_FILE=${BOOTLOADER_FILE}" >> $GITHUB_ENV
          echo "PARTITIONS_FILE=${PARTITIONS_FILE}" >> $GITHUB_ENV
          echo "OTA_FILE=${OTA_FILE}" >> $GITHUB_ENV
          echo "MANIFEST_FILE=${MANIFEST_FILE}" >> $GITHUB_ENV
          echo "PACKAGE_FILE=${PACKAGE_FILE}" >> $GITHUB_ENV
          echo "BLANK_FILE=${BLANK_FILE}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          LOWER_VERSION="${VERSION,,}"
          if [[ "${LOWER_VERSION}" == *"-rc"* || "${LOWER_VERSION}" == *"-beta"* || "${LOWER_VERSION}" == *"-alpha"* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi
        
      - name: Prepare release notes
        id: changelog
        run: |
          # Create simple release notes with installation instructions
          cat > release-notes.md << EOF
          ## Installation
        
          ### Web Installer (Recommended)
          Visit [Web Installer](https://jaapp.github.io/smart-grind-by-weight/) and select firmware version ${{ github.ref_name }}
        
          ### Command Line (Alternative)
          1. Download \`smart-grind-by-weight-${{ github.ref_name }}.bin\` below
          2. Use the grinder tool to upload: \`python3 tools/grinder.py upload smart-grind-by-weight-${{ github.ref_name }}.bin\`
        
          ## Build Information
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Commit: ${{ github.sha }}
          - Tag: ${{ github.ref_name }}
          EOF
        
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Create or update draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}
          TITLE=${TAG}

          if [ "${IS_PRERELEASE}" = "true" ]; then
            PRERELEASE_CREATE_FLAG="--prerelease"
            PRERELEASE_EDIT_FLAG="--prerelease=true"
          else
            PRERELEASE_CREATE_FLAG=""
            PRERELEASE_EDIT_FLAG="--prerelease=false"
          fi

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Updating notes and draft state."
            gh release edit "$TAG" --draft=true $PRERELEASE_EDIT_FLAG --title "$TITLE" --notes-file release-notes.md
          else
            echo "Creating new draft release $TAG"
            gh release create "$TAG" --draft $PRERELEASE_CREATE_FLAG --title "$TITLE" --notes-file release-notes.md
          fi

      - name: Upload release assets with labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}

          echo "Uploading firmware assets for $TAG"
          gh release upload "$TAG" "release-artifacts/${FIRMWARE_FILE}" --clobber --label "type=firmware"
          gh release upload "$TAG" "release-artifacts/${BOOTLOADER_FILE}" --clobber --label "type=bootloader"
          gh release upload "$TAG" "release-artifacts/${PARTITIONS_FILE}" --clobber --label "type=partitions"
          gh release upload "$TAG" "release-artifacts/${OTA_FILE}" --clobber --label "type=ota"
          gh release upload "$TAG" "release-artifacts/${MANIFEST_FILE}" --clobber --label "type=manifest"
          gh release upload "$TAG" "release-artifacts/${BLANK_FILE}" --clobber --label "type=blank_nvs"
          gh release upload "$TAG" "release-artifacts/${PACKAGE_FILE}" --clobber --label "type=package"
