# yamllint disable rule:truthy
---
name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python3 -m pip install --no-cache-dir platformio

      - name: Build firmware
        run: |
          set -euo pipefail

          pio pkg install
          pio run -e waveshare-esp32s3-touch-amoled-164

      - name: Prepare release artifacts
        run: |
          set -euo pipefail

          VERSION=${{ github.ref_name }}
          BUILD_DIR=".pio/build/waveshare-esp32s3-touch-amoled-164"
          OUT_DIR="release-artifacts"
          BASE="smart-grind-by-weight-${VERSION}"

          mkdir -p "$OUT_DIR"

          cp "$BUILD_DIR/firmware.bin" "$OUT_DIR/${BASE}.bin"
          cp "$BUILD_DIR/bootloader.bin" "$OUT_DIR/${BASE}-bootloader.bin"
          cp "$BUILD_DIR/partitions.bin" "$OUT_DIR/${BASE}-partitions.bin"

          dd if=/dev/zero of="$OUT_DIR/blank_8KB.bin" bs=8192 count=1

          python3 -m pip install --no-cache-dir detools
          echo "Generating web OTA patch for ${BASE}.bin"
          pushd "$OUT_DIR" >/dev/null
          touch empty.bin
          detools create_patch \
            -c heatshrink \
            empty.bin \
            "${BASE}.bin" \
            "${BASE}-web-ota.bin"
          rm empty.bin

          VERSION_NUMBER=${VERSION#v}
          python3 - "$OUT_DIR" "$BASE" "$VERSION_NUMBER" <<'PY'
          if True:
              import json
              import os
              import sys

              out_dir, base, version = sys.argv[1:4]

              manifest = {
                  "name": "Smart Grind By Weight",
                  "version": version,
                  "home_assistant_domain": "grinder",
                  "new_install_skip_erase": True,
                  "builds": [
                      {
                          "chipFamily": "ESP32-S3",
                          "parts": [
                              {"path": f"{base}-bootloader.bin", "offset": 0},
                              {"path": f"{base}-partitions.bin", "offset": 32768},
                              {"path": "blank_8KB.bin", "offset": 57344},
                              {"path": f"{base}.bin", "offset": 3276800},
                          ],
                      }
                  ],
              }

              path = os.path.join(out_dir, f"{base}.manifest.json")
              with open(path, "w", encoding="utf-8") as handle:
                  json.dump(manifest, handle, indent=2)
                  handle.write("\n")
          PY

          FILES=(
            "${BASE}.bin"
            "${BASE}-bootloader.bin"
            "${BASE}-partitions.bin"
            "${BASE}-web-ota.bin"
            "${BASE}.manifest.json"
            "blank_8KB.bin"
          )
          tar -czf "${BASE}.tar.gz" "${FILES[@]}"
          popd >/dev/null

      - name: Prepare release notes
        id: changelog
        run: |
          set -euo pipefail

          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          TAG=${{ github.ref_name }}
          COMMIT=${{ github.sha }}

          {
            printf '## Installation\n\n'
            printf '### Web Installer (Recommended)\n'
            printf 'Visit https://jaapp.github.io/smart-grind-by-weight/\n'
            printf 'and select the desired firmware version.\n\n'
            printf '### Command Line (Alternative)\n'
            printf '1. Download the firmware .bin asset from this release.\n'
            printf '2. Run:\n'
            printf '   python3 tools/grinder.py upload '
            printf '   smart-grind-by-weight-%s.bin\n\n' "$TAG"
            printf '## Build Information\n'
            printf '- Build Date: %s\n' "$BUILD_DATE"
            printf '- Commit: %s\n' "$COMMIT"
            printf '- Tag: %s\n' "$TAG"
          } > release-notes.md

          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          cat release-notes.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create or update draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}
          TITLE=${TAG}
          IS_PRERELEASE="false"

          if [[ "$TAG" == *"-rc."* ]] \
            || [[ "$TAG" == *"-alpha"* ]] \
            || [[ "$TAG" == *"-beta"* ]]; then
            IS_PRERELEASE="true"
          fi

          echo "IS_PRERELEASE=${IS_PRERELEASE}" >> "$GITHUB_ENV"

          if [ "${IS_PRERELEASE}" = "true" ]; then
            PRERELEASE_CREATE_FLAG="--prerelease"
            PRERELEASE_EDIT_FLAG="--prerelease=true"
          else
            PRERELEASE_CREATE_FLAG=""
            PRERELEASE_EDIT_FLAG="--prerelease=false"
          fi

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Updating notes and draft state."
            gh release edit "$TAG" \
              --draft=true \
              $PRERELEASE_EDIT_FLAG \
              --title "$TITLE" \
              --notes-file release-notes.md
          else
            echo "Creating new draft release $TAG"
            gh release create "$TAG" \
              --draft $PRERELEASE_CREATE_FLAG \
              --title "$TITLE" \
              --notes-file release-notes.md
          fi

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}
          OUT_DIR="release-artifacts"
          BASE="smart-grind-by-weight-${TAG}"
          ASSETS=(
            "${BASE}.bin"
            "${BASE}-bootloader.bin"
            "${BASE}-partitions.bin"
            "${BASE}-web-ota.bin"
            "${BASE}.manifest.json"
            "blank_8KB.bin"
            "${BASE}.tar.gz"
          )

          echo "Uploading firmware assets for $TAG"
          echo "Prerelease flag: ${IS_PRERELEASE:-false}"

          for asset in "${ASSETS[@]}"; do
            gh release upload "$TAG" "$OUT_DIR/$asset" --clobber
          done

      - name: Trigger web flasher deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh workflow run deploy-web-flasher.yml
